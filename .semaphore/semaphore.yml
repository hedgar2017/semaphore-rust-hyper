# Use the latest stable version of Semaphore 2.0 YML syntax:
version: v1.0

# Name your pipeline. In case you connect multiple pipelines with promotions,
# the name will help you differentiate between, for example, a CI build phase
# and delivery phases.
name: The Semaphore CI example with Rust and Hyper

# An agent defines the environment in which your code runs.
# It is a combination of one of available machine types and operating
# system images.
# See https://docs.semaphoreci.com/article/20-machine-types
# and https://docs.semaphoreci.com/article/32-ubuntu-1804-image
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804

# Blocks are the heart of a pipeline and are executed sequentially.
# Each block has a task that defines one or more jobs. Jobs define the
# commands to execute.
# See https://docs.semaphoreci.com/article/62-concepts
blocks:
  - name: "Default"
    task:
      prologue:
        commands:
          # Install the Rust formatter and linter.
          - rustup component add rustfmt clippy
      jobs:
      - name: Formatter and linter
        commands:
          # Download code from Git repository. This step is mandatory if the job is to work with your code.
          - checkout
          - export LOCK_CHECKSUM=$(checksum Cargo.lock)

          # Restore the ~/.cargo linter build. The build differs from the ordinar one and is stored separately.
          - ( cd ${HOME} && cache restore cargo-${SEMAPHORE_GIT_BRANCH}-${LOCK_CHECKSUM} )
          - cache restore clippy-${SEMAPHORE_GIT_BRANCH}-${LOCK_CHECKSUM}

          # Check the source code with the formatter.
          - cargo fmt --verbose --all -- --check

          # Check the source code with the linter.
          - cargo clippy

          # Store the linter build.
          - cache store clippy-${SEMAPHORE_GIT_BRANCH}-${LOCK_CHECKSUM} target
      - name: Build and tests
        commands:
          # Each job on Semaphore starts from a clean environment, so we repeat the required project setup.
          - checkout
          - export LOCK_CHECKSUM=$(checksum Cargo.lock)

          # Restore the main build.
          - ( cd ${HOME} && cache restore cargo-${SEMAPHORE_GIT_BRANCH}-${LOCK_CHECKSUM} )
          - cache restore target-${SEMAPHORE_GIT_BRANCH}-${LOCK_CHECKSUM}

          # Build the project and run the tests.
          - cargo test --verbose --all

          # Store the main build and the ~/.cargo directory.
          - export LOCK_CHECKSUM=$(checksum Cargo.lock)
          - ( cd ${HOME} && cache store cargo-${SEMAPHORE_GIT_BRANCH}-${LOCK_CHECKSUM} .cargo )
          - cache store target-${SEMAPHORE_GIT_BRANCH}-${LOCK_CHECKSUM} target
